/*
The file algo.cpp is part of the Harmony software.

Harmony is a software that provides tools for the detection of wildlife in series of images.

Copyright 2014-2016 WIPSEA SARL, contact@wipsea.com

Author(s) : Romain Dambreville

Creation date : 2015/11/22

Tous droits réservés - All rights reserved

Library used :
- OpenCV 3.0.0 : BSD 3-Clause license => http://opensource.org/licenses/BSD-3-Clause
- Boost : custom license => http://www.boost.org/users/license.html
*/

#include "misc.hpp"
#include "easylogging++.h"

bool isStringIn(std::string _test, const std::vector<std::string>& _container) {
	CLOG(TRACE, "cor_al") << "Process : is string in for string =" << _test;
  std::vector<std::string>::const_iterator it;
  for (it = _container.begin(); it != _container.end(); it++) {
    if (_test == *it) {
      return true;
    }
  }
  return false;
}

double my_stod(const std::string &valueAsString) {
  std::istringstream totalSString(valueAsString);
  double valueAsDouble;
  totalSString >> valueAsDouble;
  if (!totalSString)
    throw std::runtime_error("Error converting to double");
  return valueAsDouble;
}

bool isImage(std::string _path) {
	CLOG(TRACE, "cor_al") << "Process : checking valid extension for image =" << _path;
  std::set<std::string> targetExtensions;
  targetExtensions.insert(".JPG");
  targetExtensions.insert(".BMP");
  targetExtensions.insert(".GIF");
  targetExtensions.insert(".PNG");
  targetExtensions.insert(".TIF");

  fs:: path p(_path);
  if (!fs::is_regular_file(p)) { return false;}
  std::string extension = p.extension().string();
  std::transform(extension.begin(),
                 extension.end(), extension.begin(), ::toupper);
  if (targetExtensions.find(extension) == targetExtensions.end()) {
	  CLOG(WARNING, "cor_al") << "Wrong image format detected for image=" << _path;
    return false;
  }
  CLOG(TRACE, "cor_al") << "Status : image extension is OK image=" << _path;
  return true;
}
