/*
The file display.cpp is part of the WildlifeCounter software.

WildlifeCounter is a software that provides tools for automatic detection of wildlife in series of images.

Copyright 2014-2015 WIPSEA, contact@wipsea.com

Author(s) : Romain Dambreville

Creation date : 2016/02/05

Tous droits réservés - All rights reserved

Library used :
- OpenCV 3.0.0 : BSD 3-Clause license => http://opensource.org/licenses/BSD-3-Clause
*/


#include <opencv2/imgproc.hpp>
#include <opencv2/highgui.hpp>
#include <vector>
#include <string>
#include <algorithm>
#include "algo.hpp"

int dispHistogram(const cv::Mat& _srcImg, int _histSize) {
  cv::Mat dst;

if ( !_srcImg.data ) {
    return -1;
  }

  /// Separate the image in 3 places ( B, G and R )
  std::vector<cv::Mat> bgr_planes;
  split(_srcImg, bgr_planes);

  /// Set the ranges ( for B,G,R) )
  float range[] = { 0, 256 };
  const float* histRange = { range };

  bool uniform = true; bool accumulate = false;

  cv::Mat b_hist, g_hist, r_hist;

  /// Compute the histograms:
  calcHist(&bgr_planes[0], 1, 0, cv::Mat(), b_hist, 1,
             &_histSize, &histRange, uniform, accumulate);
  calcHist(&bgr_planes[1], 1, 0, cv::Mat(), g_hist, 1,
             &_histSize, &histRange, uniform, accumulate);
  calcHist(&bgr_planes[2], 1, 0, cv::Mat(), r_hist, 1,
            &_histSize, &histRange, uniform, accumulate);

  // Draw the histograms for B, G and R
  int hist_w = 512; int hist_h = 400;
  int bin_w = cvRound(static_cast<double>(hist_w/_histSize));

  cv::Mat histImage(hist_h, hist_w, CV_8UC3, cv::Scalar(0, 0, 0));

  /// Normalize the result to [ 0, histImage.rows ]
  /// Respect ratio between channels by normalizing to the max channel
  double bmin, bmax;
  cv::minMaxLoc(b_hist, &bmin, &bmax);
  double gmin, gmax;
  cv::minMaxLoc(g_hist, &gmin, &gmax);
  double rmin, rmax;
  cv::minMaxLoc(r_hist, &rmin, &rmax);

  double mBin = std::max(bmax, gmax);
  double maxBin = std::max(mBin, rmax);
  
  normalize(b_hist, b_hist, 0, (histImage.rows*bmax)/maxBin,
            cv::NORM_MINMAX, -1, cv::Mat() );
  normalize(g_hist, g_hist, 0, (histImage.rows*gmax)/maxBin,
            cv::NORM_MINMAX, -1, cv::Mat() );
  normalize(r_hist, r_hist, 0, (histImage.rows*rmax)/maxBin,
            cv::NORM_MINMAX, -1, cv::Mat() );

  /// Draw for each channel
  for (int i = 1; i < _histSize; i++) {
    line(histImage,
         cv::Point(bin_w*(i-1), hist_h - cvRound(b_hist.at<float>(i-1))),
         cv::Point(bin_w*(i), hist_h - cvRound(b_hist.at<float>(i))),
         cv::Scalar(255, 0, 0), 2, 8, 0);
    line(histImage, cv::Point(bin_w*(i-1),
                              hist_h - cvRound(g_hist.at<float>(i-1))),
         cv::Point(bin_w*(i), hist_h - cvRound(g_hist.at<float>(i))),
         cv::Scalar(0, 255, 0), 2, 8, 0);
    line(histImage, cv::Point(bin_w*(i-1),
                              hist_h - cvRound(r_hist.at<float>(i-1))),
         cv::Point(bin_w*(i), hist_h - cvRound(r_hist.at<float>(i))),
         cv::Scalar(0, 0, 255), 2, 8, 0);
  }

  /// Display
  cv::namedWindow("calcHist Demo", CV_WINDOW_AUTOSIZE);
  cv::imshow("calcHist Demo", histImage);

  cv::waitKey(0);

  return 0;
}


int dispImage(const cv::Mat& _srcImg, std::string _title) {
  cv::Mat temp = _srcImg.clone();
  cv::namedWindow(_title, CV_WINDOW_NORMAL);
  cv::resize(temp, temp, cv::Size(1920, 1080));
  cv::imshow(_title, temp);
  cv::waitKey(0);
  return 0;
}


